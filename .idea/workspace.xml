<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="99d62bc2-bbc8-4ec3-83ef-5219c78c1f98" name="Default" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_java_jdbc_0_6_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_postgresql_postgresql_9_4_1201_jdbc41.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/finn.iml" beforeDir="false" afterPath="$PROJECT_DIR$/finn.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/finn/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/finn/core.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="965772650">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="2" />
          <entry key="project.open.time.0" value="1" />
          <entry key="project.open.time.6" value="1" />
          <entry key="project.open.time.8" value="1" />
          <entry key="project.opened" value="3" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="clj" value="2" />
          <entry key="iml" value="1" />
          <entry key="md" value="1" />
          <entry key="nrepl-port" value="1" />
          <entry key="txt" value="1" />
          <entry key="xml" value="3" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="Clojure" value="2" />
          <entry key="IDEA_MODULE" value="1" />
          <entry key="Markdown" value="1" />
          <entry key="PLAIN_TEXT" value="2" />
          <entry key="XML" value="3" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="clj" value="4582" />
          <entry key="txt" value="1" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="4582" />
          <entry key="PLAIN_TEXT" value="1" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/finn/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="210">
              <caret line="88" column="45" selection-start-line="88" selection-start-column="45" selection-end-line="88" selection-end-column="45" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="187">
              <caret line="11" column="50" lean-forward="true" selection-start-line="11" selection-start-column="50" selection-end-line="11" selection-end-column="50" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>/job/fulltime/ad.html?finnkode=121867743</find>
      <find>mod</find>
      <find>annonse</find>
      <find>hickmaptostring</find>
      <find>keyed</find>
      <find>title</find>
      <find>130141109</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/annonser.txt" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/finn/core.clj" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-18" />
    <option name="y" value="83" />
    <option name="width" value="1390" />
    <option name="height" value="1000" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
              <item name=".idea" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1538086373218" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="ReplState" timestamp="1538086228832">{:repl-history {:ide [], :local [{:command &quot;(use 'finn.core)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(run-server)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(def b (htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;{\&quot;hei\&quot; \&quot;hallo\&quot;}&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(get {\&quot;hei\&quot; \&quot;hallo\&quot;} \&quot;hei\&quot; ) &quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) body))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            b)))&quot;, :offset 400, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            b)))&quot;, :offset 397, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            grouped)))&quot;, :offset 403, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(map array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 457, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply map array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 463, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 459, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n( (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 444, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped))) &quot;, :offset 441, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] g2) ) &quot;, :offset 449, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(map flatten %) v))) g2) ) &quot;, :offset 492, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(flatten %) v))) g2) ) &quot;, :offset 488, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v))) g2) ) &quot;, :offset 483, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v)) g2) ) ) &quot;, :offset 484, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (array-map (map (fn [v] (map flatten v)) g2))  ) ) &quot;, :offset 497, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (apply array-map (map (fn [v] (map flatten v)) g2))  ) ) &quot;, :offset 503, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2 (apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (flatten (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v)) g2))))&quot;, :offset 72} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (flatten (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v))) g2))  ) &quot;, :offset 552, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v)) g2))  ) &quot;, :offset 542, :ns &quot;user&quot;} {:command &quot;(keyed-description b)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v)) g2))  ) &quot;, :offset 484, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (first %) (last %)) g3)) )  ) &quot;, :offset 541, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (read-string (first %)) (last %)) g3)) )  ) &quot;, :offset 555, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (str (first %)) (last %)) g3)) )  ) &quot;, :offset 547, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (flatten (map #(assoc '{} (first (first %)) (last %)) g3)) ) )  ) &quot;, :offset 560, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (finn.core/map-flatten (map #(assoc '{} (first (first %)) (last %)) g3)) ) )  ) &quot;, :offset 574, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (first (first %)) (last %)) g3)) )  ) &quot;, :offset 549, :ns &quot;user&quot;} {:command &quot;(annonse b)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(finn.core/itannonser)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(finn.core/run-server)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(finn/pages \&quot;1\&quot;)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(finn.core)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;finn&quot;, :offset 4, :ns &quot;user&quot;} {:command &quot;(find-ns)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(find-ns finn)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(finn)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(import finn)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(require 'finn)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(require 'finn.core :reload)&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(hitcount \&quot;12\&quot;)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(finn.core/annonselinks \&quot;2\&quot;)&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(finn.core/annonselinks 2)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(finn.core/annonselinks 0.23)&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(take 1   (finn.core/annonselinks 0.23))&quot;, :offset 40, :ns &quot;user&quot;} {:command &quot;(finn.core/writeannonser)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (htmlbody \&quot;/job/fulltime/ad.html?finnkode=129627387\&quot;))&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (finn.core/htmlbody \&quot;/job/fulltime/ad.html?finnkode=129627387\&quot;))&quot;, :offset 83, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (finn.core/htmlbody \&quot;129627387\&quot;))&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (finn.core/htmlbody \&quot;finn.no/job/fulltime/ad.html?finnkode=129627387\&quot;))&quot;, :offset 90, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/search.html?occupation=0.23\&quot;))&quot;, :offset 103, :ns &quot;user&quot;} {:command &quot;(finn.core/annonse (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=129776835\&quot;))&quot;, :offset 102, :ns &quot;user&quot;} {:command &quot;(finn.core/stop-server finn.core/server)&quot;, :offset 40, :ns &quot;user&quot;} {:command &quot;(require 'finn.core)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(finn.core/create-server)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;\n(f/annonse (f/htmlbody (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) ))&quot;, :offset 97, :ns &quot;user&quot;} {:command &quot;\n (f/htmlbody (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) )&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;\n (f/description (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) )&quot;, :offset 89, :ns &quot;user&quot;} {:command &quot;\n\n (f/title (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) )&quot;, :offset 0} {:command &quot;()&quot;, :offset 2} {:command &quot;(require '[finn.core :as f])&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(f/create-server)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;\n\n\n (f/title (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) )&quot;, :offset 85, :ns &quot;user&quot;} {:command &quot; (f/annonse (f/title (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) ))&quot;, :offset 94, :ns &quot;user&quot;} {:command &quot;(annonse (htmlbody (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) ))&quot;, :offset 92, :ns &quot;user&quot;} {:command &quot;(f/annonse (f/htmlbody (str \&quot;https://www.finn.no/job/parttime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) ))&quot;, :offset 96, :ns &quot;user&quot;} {:command &quot;(require '[clojure.java.jdbc :as sql])&quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(sql/insert! \&quot;postgresql://localhost:5432/shouter\&quot; :desc {:key \&quot;Arbeidsgiver\&quot; :value \&quot;Centric IT Professionals AS\&quot; :adkey \&quot;129546529\&quot;})&quot;, :offset 135, :ns &quot;user&quot;} {:command &quot;(sql/insert! \&quot;postgresql://localhost:5432/shouter\&quot; :desc {:id 1 :key \&quot;Arbeidsgiver\&quot; :value \&quot;Centric IT Professionals AS\&quot; :adkey \&quot;129546529\&quot;})&quot;, :offset 141, :ns &quot;user&quot;} {:command &quot;(sql/query \&quot;postgresql://localhost:5432/shouter\&quot; [\&quot;select * from ad\&quot;])&quot;, :offset 70, :ns &quot;user&quot;} {:command &quot;(sql/query \&quot;postgresql://localhost:5432/shouter\&quot; [\&quot;select * from desc\&quot;])&quot;, :offset 72, :ns &quot;user&quot;} {:command &quot;(sql/insert! \&quot;postgresql://localhost:5432/shouter\&quot; :descc {:key \&quot;Arbeidsgiver\&quot; :value \&quot;Centric IT Professionals AS\&quot; :adkey \&quot;129546529\&quot;})&quot;, :offset 136, :ns &quot;user&quot;} {:command &quot;(sql/query \&quot;postgresql://localhost:5432/shouter\&quot; [\&quot;select * from descc\&quot;])&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(f/annonse (f/htmlbody (str \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) ))&quot;, :offset 96, :ns &quot;user&quot;} {:command &quot; (def b (f/annonse (f/htmlbody (str \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=\&quot; \&quot;129546529\&quot;) )))&quot;, :offset 105, :ns &quot;user&quot;} {:command &quot;b&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot;(doseq (get :k-decription b))&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(doseq print (get :k-decription b))&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(doseq println (get :k-decription b))&quot;, :offset 37, :ns &quot;user&quot;} {:command &quot;(doseq println (vec (get :k-decription b)) )&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(vec (get :k-decription b))&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(get :k-decription b)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(:k-decription b)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(vec :k-decription b)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(vec (:k-decription b))&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(assoc {} (:k-decription b))&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(assoc '{} (:k-decription b))&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(map #(assoc {} %)  (:k-decription b))&quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(map #(assoc '{} %)  (:k-decription b))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(map #(assoc '{} (first %) (last %))  (:k-decription b))&quot;, :offset 56, :ns &quot;user&quot;} {:command &quot;(map #(assoc '{} :s (first %) :k (last %))  (:k-decription b))&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;(map #(assoc '{} :key (first %) :value (last %))  (:k-decription b))&quot;, :offset 68, :ns &quot;user&quot;} {:command &quot;(map #(assoc '{} :key (first %) :value (last %) :adkey \&quot;129546529\&quot;)  (:k-decription b))&quot;, :offset 87, :ns &quot;user&quot;} {:command &quot;(vec (map #(assoc '{} :key (first %) :value (last %) :adkey \&quot;129546529\&quot;)  (:k-decription b)))&quot;, :offset 93, :ns &quot;user&quot;} {:command &quot;(doseq #(sql/insert! :descc %) (vec (map #(assoc '{} :key (first %) :value (last %) :adkey \&quot;129546529\&quot;)  (:k-decription b))))&quot;, :offset 125, :ns &quot;user&quot;} {:command &quot;(map #(sql/insert! :descc %) (vec (map #(assoc '{} :key (first %) :value (last %) :adkey \&quot;129546529\&quot;)  (:k-decription b))))&quot;, :offset 123, :ns &quot;user&quot;} {:command &quot;(map #(sql/insert! \&quot;postgresql://localhost:5432/shouter\&quot; :descc %) (vec (map #(assoc '{} :key (first %) :value (last %) :adkey \&quot;129546529\&quot;)  (:k-decription b))))&quot;, :offset 161, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL">
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="REPL" type="ClojureREPL" factoryName="Local">
      <module name="finn" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method v="2" />
    </configuration>
    <configuration name="core (1)" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="finn" />
      <setting name="path" value="$PROJECT_DIR$/src/finn/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="true" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="finn" />
      <setting name="path" value="$PROJECT_DIR$/src/finn/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="finn.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="finn" />
      <setting name="path" value="$PROJECT_DIR$/src/finn/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/finn" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <properties />
      <listeners />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Clojure Application.core" />
      <item itemvalue="Clojure Application.core (1)" />
      <item itemvalue="Clojure REPL.REPL" />
      <item itemvalue="Clojure Application.finn.core" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.finn.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="99d62bc2-bbc8-4ec3-83ef-5219c78c1f98" name="Default" comment="" />
      <created>1528567433530</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1528567433530</updated>
      <workItem from="1528567436973" duration="4768000" />
      <workItem from="1528659395868" duration="35055000" />
      <workItem from="1538062878166" duration="26000" />
      <workItem from="1538062946735" duration="1510000" />
      <workItem from="1538064604318" duration="20784000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="62143000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1936" height="1056" extended-state="6" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.12846482" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Image Layers" order="3" />
      <window_info id="Capture Tool" order="4" />
      <window_info id="UI Designer" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.49946696" visible="true" weight="0.3275488" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.4989339" weight="0.3286334" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.33579725" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Database Changes" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Terminal" order="8" />
      <window_info anchor="bottom" id="Event Log" order="9" sideWeight="0.50053304" side_tool="true" visible="true" weight="0.3275488" />
      <window_info anchor="bottom" id="Version Control" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.358742" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Database" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" id="Maven Projects" order="10" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/finn/core.clj</url>
          <line>42</line>
          <properties />
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/.idea/workspace.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/finn.iml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.idea/misc.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.idea/modules.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.nrepl-port">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/annonser.txt">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="SPLIT">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/finn/core_test.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="187">
          <caret line="11" column="50" lean-forward="true" selection-start-line="11" selection-start-column="50" selection-end-line="11" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/finn/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="88" column="45" selection-start-line="88" selection-start-column="45" selection-end-line="88" selection-end-column="45" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>finn</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: args4j:2.0.26</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>