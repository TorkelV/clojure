<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="99d62bc2-bbc8-4ec3-83ef-5219c78c1f98" name="Default" comment="">
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/finn/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/finn/core.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/finn/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="379">
              <caret line="111" column="33" lean-forward="true" selection-start-line="111" selection-start-column="33" selection-end-line="111" selection-end-column="33" />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="135">
              <caret line="9" column="48" selection-start-line="9" selection-start-column="48" selection-end-line="9" selection-end-column="48" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>/job/fulltime/ad.html?finnkode=121867743</find>
      <find>mod</find>
      <find>annonse</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/finn/core.clj" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="NodePackageJsonFileManager">
    <packageJsonPaths />
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-18" />
    <option name="y" value="83" />
    <option name="width" value="1390" />
    <option name="height" value="1000" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="finn" type="b2602c69:ProjectViewProjectNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="finn" type="b2602c69:ProjectViewProjectNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="finn" type="b2602c69:ProjectViewProjectNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="finn" type="b2602c69:ProjectViewProjectNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="finn" type="b2602c69:ProjectViewProjectNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="finn" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="AndroidView" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="ReplState" timestamp="1528729822399">{:repl-history {:ide [], :local [{:command &quot; (map #(map type %) (map #(map :content %)  (last g))) &quot;, :offset 55, :ns &quot;user&quot;} {:command &quot; (map #(map type (flatten %)) (map #(map :content %)  (last g))) &quot;, :offset 65, :ns &quot;user&quot;} {:command &quot; (map #(map (if (= (type (flatten %)) clojure.lang.PersistentArrayMap) (:content %) %)) (map #(map :content %)  (last g))) &quot;, :offset 123, :ns &quot;user&quot;} {:command &quot; (map #(map (if (= (type (flatten %)) clojure.lang.PersistentArrayMap) (:content %) %) %) (map #(map :content %) (last g))) &quot;, :offset 124, :ns &quot;user&quot;} {:command &quot; (map #(map (if (= (type (flatten %)) clojure.lang.PersistentArrayMap) (:content %) %)) (map #(map :content %) (last g))) &quot;, :offset 122, :ns &quot;user&quot;} {:command &quot;(map #(map :content %) (last (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k)) (map #(remove string? %) (map :content (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))))) )\n                             ))&quot;, :offset 308, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map #(map :content %) g) v) g) &quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map #(map :content %) g) v) g\n     ) &quot;, :offset 50, :ns &quot;user&quot;} {:command &quot;(map #(map :content %) (last g))&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map #(map :content %) v)) g) &quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map #(map :content %) v)))  g) &quot;, :offset 58, :ns &quot;user&quot;} {:command &quot;(flatten (map (fn [v] (partition 2 (map #(map :content %) v)))  g) ) &quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map #(map :content %) v)))  g)&quot;, :offset 57, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map (fn [v2] (map #(str (:content %) ) v2))  v)))  g)&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map (fn [v2] (map #(read-str (:content %) ) v2))  v)))  g)&quot;, :offset 85, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map (fn [v2] (map #((:content %) ) v2))  v)))  g)&quot;, :offset 76, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map (fn [v2] (map #(:content % ) v2))  v)))  g)&quot;, :offset 74, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (partition 2 (map #(map :content %) v)))  g)\n&quot;, :offset 58, :ns &quot;user&quot;} {:command &quot;(apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) \n&quot;, :offset 74, :ns &quot;user&quot;} {:command &quot;\n(map #(conj (first (first %) (rest %))) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 115, :ns &quot;user&quot;} {:command &quot;\n(into map-indexed #((first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 124, :ns &quot;user&quot;} {:command &quot;\n(map-indexed #((first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 119, :ns &quot;user&quot;} {:command &quot;\n(into map #((first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 116, :ns &quot;user&quot;} {:command &quot;\n(into map #( (first (first %)) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 0} {:command &quot;\n(into {} (map #(conj (first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )) &quot;, :offset 127, :ns &quot;user&quot;} {:command &quot;\n(into '{} (map #(conj (first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )) &quot;, :offset 128, :ns &quot;user&quot;} {:command &quot;\n(map #(conj (first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 116, :ns &quot;user&quot;} {:command &quot;\n(map flatten (map #(conj (first (first %) ) (rest %)) (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )) &quot;, :offset 131, :ns &quot;user&quot;} {:command &quot;\n(map flatten (apply concat (map (fn [v] (partition 2 (map #(map :content %) v)))  g)) )&quot;, :offset 88, :ns &quot;user&quot;} {:command &quot;(finn.core/semi-strukturert-beskrivelse g)&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) )) g)&quot;, :offset 89, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v) ) g)&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(def g (finn.core/semi-strukturert-beskrivelse (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))) &quot;, :offset 131, :ns &quot;user&quot;} {:command &quot;g&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot; ((map :content\n       (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;)))))&quot;, :offset 156, :ns &quot;user&quot;} {:command &quot;(-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;)))&quot;, :offset 131, :ns &quot;user&quot;} {:command &quot;(map :content (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))))&quot;, :offset 146, :ns &quot;user&quot;} {:command &quot;(def b (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;)) &quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(finn.core/semi-strukturert-beskrivelse b)&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(def g2 (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n             (map #(remove string? %)\n                  (map :content\n                       (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) g))))))&quot;, :offset 228, :ns &quot;user&quot;} {:command &quot;(def g2 (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n             (map #(remove string? %)\n                  (map :content\n                       (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;)))))))&quot;, :offset 309, :ns &quot;user&quot;} {:command &quot;g2&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(map #(fn [v] (map :content v) %) g2)&quot;, :offset 37, :ns &quot;user&quot;} {:command &quot;(map #(fn [v] (map :content) %) g2)&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(map (fn [v] (map :content) v) g2)&quot;, :offset 34, :ns &quot;user&quot;} {:command &quot;(map #(map :content) g2)&quot;, :offset 24, :ns &quot;user&quot;} {:command &quot;(map #(map :content %) g2)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(map #(map %) g2)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(map #(map type %) g2)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(map (fn [v2] (map :content v2)) g2)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(map (fn [v]\n       (partition 2\n                  (map (fn [v2] (map :content v2)) v)))\n     g2)&quot;, :offset 97, :ns &quot;user&quot;} {:command &quot;(map (fn [v]\n       \n                  (map (fn [v2] (map :content v2)) v))\n     g2)&quot;, :offset 84, :ns &quot;user&quot;} {:command &quot;(map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n     (map #(remove string? %)\n          (map :content\n               (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b)))))&quot;, :offset 195, :ns &quot;user&quot;} {:command &quot;(map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n     (map #(remove (nil? :content) %)\n          (map :content\n               (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b)))))&quot;, :offset 203, :ns &quot;user&quot;} {:command &quot;(map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n     (map #(remove :content)\n          (map :content\n               (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b)))))&quot;, :offset 194, :ns &quot;user&quot;} {:command &quot;(map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n     (map #(remove :content %)\n          (map :content\n               (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b)))))&quot;, :offset 196, :ns &quot;user&quot;} {:command &quot;(map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n     (map #(filter :content %)\n          (map :content\n               (-&gt; (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b)))))&quot;, :offset 196, :ns &quot;user&quot;} {:command &quot;(finn.core/semi-strukturert-beskrivelse (finn.core/htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))&quot;, :offset 123, :ns &quot;user&quot;} {:command &quot;(def b  (htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))&quot;, :offset 81, :ns &quot;user&quot;} {:command &quot;{:title (tittel b) \n :description (beskrivelse b)\n :keyed-decription (semi-strukturert-beskrivelse b)}&quot;, :offset 102, :ns &quot;user&quot;} {:command &quot;(finn.core keyed-description b)&quot;, :offset 31, :ns &quot;user&quot;} {:command &quot;(finn.core/keyed-description b)&quot;, :offset 31, :ns &quot;user&quot;} {:command &quot;(stop-server)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(stop-server finn.core/server)&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(stop server finn.core/server)&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(use 'finn.core)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(run-server)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(def b (htmlbody \&quot;https://www.finn.no/job/fulltime/ad.html?finnkode=119329362\&quot;))&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;b&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot;{\&quot;hei\&quot; \&quot;hallo\&quot;}&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(get {\&quot;hei\&quot; \&quot;hallo\&quot;} \&quot;hei\&quot; ) &quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) body))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            b)))&quot;, :offset 400, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            b)))&quot;, :offset 397, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n       \n       (map (fn [v]\n              (partition 2\n                         (map (fn [v2] (map :content v2)) v)))\n            grouped)))&quot;, :offset 403, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(map array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 457, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply map array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 463, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply array-map (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 459, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n( (apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped)))) &quot;, :offset 444, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(apply concat\n\n                  (map (fn [v]\n                         (partition 2\n                                    (map (fn [v2] (map :content v2)) v)))\n                       grouped))) &quot;, :offset 441, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] g2) ) &quot;, :offset 449, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(map flatten %) v))) g2) ) &quot;, :offset 492, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(flatten %) v))) g2) ) &quot;, :offset 488, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v))) g2) ) &quot;, :offset 483, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v)) g2) ) ) &quot;, :offset 484, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (array-map (map (fn [v] (map flatten v)) g2))  ) ) &quot;, :offset 497, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (apply array-map (map (fn [v] (map flatten v)) g2))  ) ) &quot;, :offset 503, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2 (apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (flatten (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v)) g2))))&quot;, :offset 72} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (flatten (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v))) g2))  ) &quot;, :offset 552, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map #(if (= (type %) clojure.lang.PersistentArrayMap) (:content %) %) v)) g2))  ) &quot;, :offset 542, :ns &quot;user&quot;} {:command &quot;(keyed-description b)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [ g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (map (fn [v] (map flatten v)) g2))  ) &quot;, :offset 484, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (first %) (last %)) g3)) )  ) &quot;, :offset 541, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (read-string (first %)) (last %)) g3)) )  ) &quot;, :offset 555, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (str (first %)) (last %)) g3)) )  ) &quot;, :offset 547, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (flatten (map #(assoc '{} (first (first %)) (last %)) g3)) ) )  ) &quot;, :offset 560, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (finn.core/map-flatten (map #(assoc '{} (first (first %)) (last %)) g3)) ) )  ) &quot;, :offset 574, :ns &quot;user&quot;} {:command &quot;(let [grouped (map (fn [k] (partition-by #(get (get % :attrs) :data-automation-id) k))\n                   (map #(filter :content %)\n                        (map :content\n                             (s/select (s/descendant (s/class \&quot;r-prl\&quot;)) b))))]\n(let  [g2(apply concat\n\n                (map (fn [v]\n                       (partition 2\n                                  (map (fn [v2] (map :content v2)) v)))\n                     grouped))] \n  (let [g3 (map (fn [v] (map flatten v)) g2)] \n    (map #(assoc '{} (first (first %)) (last %)) g3)) )  ) &quot;, :offset 549, :ns &quot;user&quot;} {:command &quot;(annonse b)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(finn.core/itannonser)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(finn.core/run-server)&quot;, :offset 22, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL">
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
    </configuration>
    <configuration name="REPL" type="ClojureREPL" factoryName="Local">
      <module name="finn" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration name="finn.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="finn" />
      <setting name="path" value="$PROJECT_DIR$/src/finn/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/finn" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <patterns />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <properties />
      <listeners />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REPL" />
      <item itemvalue="Clojure Application.finn.core" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.finn.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="99d62bc2-bbc8-4ec3-83ef-5219c78c1f98" name="Default" comment="" />
      <created>1528567433530</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1528567433530</updated>
      <workItem from="1528567436973" duration="4768000" />
      <workItem from="1528659395868" duration="35055000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="39823000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="67" y="25" width="1853" height="1055" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="right" id="Palette&#9;" order="3" />
      <window_info id="Image Layers" order="2" />
      <window_info anchor="right" id="Capture Analysis" order="3" />
      <window_info anchor="bottom" id="Event Log" order="7" sideWeight="0.5005208" side_tool="true" weight="0.18796198" />
      <window_info anchor="right" id="Maven Projects" order="3" />
      <window_info anchor="bottom" id="Database Changes" order="7" show_stripe_button="false" />
      <window_info active="true" anchor="right" id="REPL" order="3" side_tool="true" visible="true" weight="0.50296813" />
      <window_info anchor="bottom" id="Version Control" order="7" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.49947917" weight="0.3295688" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info id="Capture Tool" order="2" />
      <window_info id="Designer" order="2" />
      <window_info content_ui="combo" id="Project" order="0" weight="0.18888289" />
      <window_info anchor="right" id="Database" order="3" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info id="UI Designer" order="2" />
      <window_info anchor="right" id="Theme Preview" order="3" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.33579725" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Message" order="0" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="8" />
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/finn/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" lean-forward="true" selection-start-line="6" selection-end-line="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/finn/core_test.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="135">
          <caret line="9" column="48" selection-start-line="9" selection-start-column="48" selection-end-line="9" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/finn/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="379">
          <caret line="111" column="33" lean-forward="true" selection-start-line="111" selection-start-column="33" selection-end-line="111" selection-end-column="33" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>